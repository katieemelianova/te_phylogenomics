import os
import glob
te_fams = glob.glob("*TE*.bed")
te_fams = [i for i in te_fams if os.path.getsize(i) > 0]
te_fams = [i.split("TE_")[1].rstrip(".bed") for i in te_fams]
te_fams = ["_".join(["TE", i]) for i in te_fams]
print(te_fams)



rule makeblastdb:
    input: "{species}_{repeat}_{te_family}.bed.merged.fasta"
    output: "{species}_{repeat}_{te_family}.bed.merged.blastn"
    shell:
        """
        makeblastdb -in {input} -dbtype nucl
        blastn -query {input} -db {input} -out {output} -outfmt '6 qseqid sseqid qstart qend sstart send length pident evalue'
        """

rule parse_blast:
    input: "{species}_{repeat}_{te_family}.bed.merged.blastn"
    output: "{species}_{repeat}_{te_family}.temp"
    shell:
        """
        #cat {input} | awk '$7 > 200 && $7 < 300 && $1 == $2' | sort -u -k 1,2 > {output}
        cat {input} | awk '$7 > 200 && $7 < 300 && $1 == $2' | sort -u -k 1,2 | awk 'function abs(x){{return ((x < 0.0) ? -x : x)}} abs($3 - $5) > 1000' > {output}
        """


rule extract_blast:
    input: "{species}_{repeat}_{te_family}.temp"
    output: dynamic("{species}_{repeat}_{te_family}.{individual}.ltr")
    shell:
        """
        if [ -s {input} ]; 
        then while read i;
        do individual=`echo $i | cut -f 1 -d" "`;
        outfile=`echo {wildcards.species}_{wildcards.repeat}_{wildcards.te_family}.$individual.ltr | sed 's/:._/:_/g'`;
        echo $i | awk '$7 > 200 && $7 < 400 && $1 == $2' | sort -u -k 1,2 | cut -d" " -f 1,3,4 > $outfile;
        echo $i | awk '$7 > 200 && $7 < 400 && $1 == $2' | sort -u -k 1,2 | cut -d" " -f 2,5,6 >> $outfile;
        done < {input}; 
        else touch {wildcards.species}_{wildcards.repeat}_{wildcards.te_family}.empty.ltr;
         fi 
        """

rule bed_to_fasta:
    input: "{species}_{repeat}_{te_family}.{individual}.ltr"
    output: "{species}_{repeat}_{te_family}.{individual}.seqs"
    shell:
        """
        sed -ie 's/ /\t/g' {input}
        awk -i inplace -F'\t' '$2 > $3 {{ $0 = $1 FS $3 FS $2 }} 1' {input}
        seqkit subseq --bed {input} {wildcards.species}_{wildcards.repeat}_{wildcards.te_family}.bed.merged.fasta > {output}
        """

rule align_ltrs:
    input: "{species}_{repeat}_{te_family}.{individual}.seqs"
    output: "{species}_{repeat}_{te_family}.{individual}.ltrmafft"
    shell:
        """
        mafft --auto --adjustdirectionaccurately {input} > {output}
        """

rule distmat2:
    input: "{species}_{repeat}_{te_family}.{individual}.ltrmafft"
    output: "{species}_{repeat}_{te_family}.{individual}.ltrmafft.mldist" 
    shell:
        """
        iqtree2 -s {input} -m TPM3u+F+R10
        awk -v OFS="\t" '$1=$1' {input}.mldist > {input}.mldist2
        rm {input}.mldist 
        mv {input}.mldist2 {input}.mldist
        """

rule parse_mldist:
    input: dynamic("{species}_{repeat}_{te_family}.{individual}.ltrmafft.mldist")
    output: "{species}_{repeat}_{te_family}.all"
    run:
        import pandas
        import itertools
        #read in distmat of all LTRs generated by IQtree
        distmat=pandas.read_table({input}, index_col=0, header=None, skiprows=1)
        # set columns names to match rownames as this is a square matrix
        distmat.columns = list(distmat.index)
        # get a unique list of the parent contigs where 5' and 3' LTRs have been extracted from
        parent_contig=[i.split("_.")[0] for i in distmat.index]
        parent_contig=list(set(parent_contig))
        # open file for writing
        outfile = open("_".join([parent_contig, "LTR_dists.txt"]), "a")
        # loop through parent contigs, grab out the distance between each pair of LTRs
        for s in parent_contig:
         outfile = open({output}, "a")
         slices = [i for i in distmat.index if i.startswith(s)]
         x = distmat.loc[slices, slices]
         y = [i for i in list(itertools.chain.from_iterable(x.values.tolist())) if i != 0.0]
         y = list(set(y))
         for i in y:
          outfile.write("\t".join([s, str(i)]))
          outfile.write("\n")
         outfile.close() 
        


rule distamtoutput:
    input: "{species}_{repeat}_{te_family}.{individual}.ltrmafft"
    output: "{species}_{repeat}_{te_family}.{individual}.dist"
    shell:
        """
        if [ -s {input} ];
        then mv {input} distmat_input
        distmat -sequence distmat_input -nucmethod 0 -outfile distmat_output
        distance=`tail -2 distmat_output | head -1 | cut -f 3`
        echo {wildcards.te_family} $distance > {output};
        else touch {output}
        fi
        """

rule aggregate_ltr_info:
    input: dynamic("{species}_{repeat}_{te_family}.{individual}.dist") 
    output: "{species}_{repeat}_{te_family}.all"
    shell:
        """
        cat {input} > {output}
        """


rule all:
    input: expand("impolita_Copia_{te_family}.all", te_family=te_fams)



